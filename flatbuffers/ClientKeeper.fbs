namespace com.bnpparibas.gban.clientkeeper.grpc;

/**
====================================== gRPC API ======================================
*/
rpc_service FbClientKeeper {
    /**
    * Returns Book by public id
    *
    * @param Id with book public id
    * @return BookResponse with book or with error message
    */
    GetBookBy(FbId):                   FbBookResponse          (streaming: "none");

    /**
    * Lookups for book via client portfolio_code
    *
    * <pre>{@code
    *   select b.*
    *     from BOOKS b, PORTFOLIOS p
    *     where b.ID=p.BOOK_ID and p.PORTFOLIO_CODE={portfolio_code}
    * }</pre>
    *
    * @param Portfolio
    * @return BookResponse with book or with error message
    */
    LookupBookBy(FbPortfolio):         FbBookResponse          (streaming: "none");

    /**
    * Lookups for book public id via client portfolio_code
    *
    * <pre>{@code
    *   select BOOK_ID
    *     from PORTFOLIOS
    *     where PORTFOLIO_CODE={portfolio_code}
    * }</pre>
    *
    * @param Portfolio
    * @return IdResponse with public id or with error message
    */
    LookupBookIdBy(FbPortfolio):       FbIdResponse            (streaming: "none");
}

/**
====================================== Requests ======================================
*/

/**
* Public id of any object
*/
table FbId {
    id:                                long;
}

/**
* Client representation of portfolio
*/
table FbPortfolio {
    portfolio_code:                    string;
}

/**
====================================== Responses ======================================
*/

/**
* Is used in response to define technical status
*/
enum FbStatus: byte {
    SUCCESS,
    ERROR_CLIENT,                                  // No reason for retry. for ex. partially filled request.
    ERROR_SERVER                                   // Can be retried
}

/**
* Wraps public id of any object or error message
*/
table FbIdResponse {
    id:                                long;
    status:                            FbStatus;
    status_message:                    string;
}

/**
* Wraps Book or error message
*/
table FbBookResponse {
    book:                              FbBook;
    status:                            FbStatus;
    status_message:                    string;
}

/**
====================================== Messages ======================================
*/

/**
* Representation of Book
*/
table FbBook {
    id:                                long;
    account:                           string;       // BOOKS.TRADING_ACCOUNT
}